/* This file is part of Grust, GObject introspection bindings for Rust
 *
 * Copyright (C) 2013  Mikhail Zabaluev <mikhail.zabaluev@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */

#[link(name = "grust-Gio", vers = "2.0",
       uuid = "1a020b19-8587-44fe-9b04-c529c27f3c33")];

#[crate_type = "lib"];

extern mod grust (name="grust", vers="0.1");
extern mod glib (name="grust-GLib", vers="2.0");
extern mod gobject (name="grust-GObject", vers="2.0");

use grust::plumbing;
use grust::object;
use grust::types::*;
use grust::gstr;

pub mod raw {
    use grust::types::*;
    use grust::object::GType;
    use glib;
    use gobject;

    pub struct GAsyncResult;
    pub struct GFile;

    pub struct GCancellable {
        parent_instance: gobject::raw::GObject,
        priv _priv: *()
    }

    pub struct GInputStream {
        parent_instance: gobject::raw::GObject,
        priv _priv: *()
    }

    pub struct GFileInputStream {
        parent_instance: GInputStream,
        priv _priv: *()
    }

    #[link_name="gio-2.0"]
    pub extern mod symbols {
        fn g_async_result_get_type() -> GType;
        fn g_file_get_type() -> GType;
        fn g_file_new_for_path(path: *gchar) -> *GFile;
        fn g_file_get_path(file: *GFile) -> *gchar;
        fn g_file_read_async    (file           : *GFile,
                                 io_priority    : libc::c_int,
                                 cancellable    : *GCancellable,
                                 callback       : *u8,
                                 user_data      : *());
        fn g_file_read_finish   (file   : *GFile,
                                 res    : *GAsyncResult,
                                 error  : **glib::raw::GError)
                                -> *GFileInputStream;
    }
}

pub mod classes {
    use grust::object;
    use raw;

    pub type Cancellable = object::Interface<raw::GCancellable>;
    pub type InputStream = object::Interface<raw::GInputStream>;
    pub type FileInputStream = object::Interface<raw::GFileInputStream>;
}

pub mod interfaces {
    use grust::object;
    use raw;

    pub type AsyncResult = object::Interface<raw::GAsyncResult>;
    pub type File = object::Interface<raw::GFile>;
}

pub type AsyncReadyCallback = ~fn(source_object : &gobject::classes::Object,
                                  res           : &interfaces::AsyncResult);

impl object::ObjectType for raw::GAsyncResult {
    fn get_type() -> object::GType {
        unsafe {
            raw::symbols::g_async_result_get_type()
        }
    }
}

impl object::ObjectType for raw::GFile {
    fn get_type() -> object::GType {
        unsafe {
            raw::symbols::g_file_get_type()
        }
    }
}

mod callbacks {
    use grust::plumbing;
    use grust::object;
    use raw;
    use gobject;

    pub extern fn async_ready_callback(source_object: *gobject::raw::GObject,
                                       res          : *raw::GAsyncResult,
                                       user_data    : *()) {
        unsafe {
            assert!(ptr::is_not_null(user_data));
            let cd: ~plumbing::CallbackData
                    = cast::transmute(user_data as *plumbing::CallbackData);
            assert!(ptr::is_not_null(cd.callback));
            let callback: ~::AsyncReadyCallback
                          = cast::transmute(cd.callback as *::AsyncReadyCallback);
            let arg1 = object::make_interface(source_object, cd.context);
            let arg2 = object::make_interface(res, cd.context);
            (*callback)(&arg1, &arg2);
        }
    }
}

pub trait File {
    fn get_path(&self) -> gstr::utf8;
    fn read_async(&self,
                  io_priority: int,
                  cancellable: Option<&classes::Cancellable>,
                  callback: AsyncReadyCallback);
    fn read_finish(&self, res: &interfaces::AsyncResult)
                  -> object::Reference<raw::GFileInputStream>;
}

impl File {
    pub fn new_for_path(path: &str) -> object::Reference<raw::GFile> {
        unsafe {
            let mut stack_out: (*plumbing::GMainContext, *raw::GFile)
                               = (ptr::null(), ptr::null());
            let mut owned_out: ~(*plumbing::GMainContext, *raw::GFile);
            let mut out = ptr::to_unsafe_ptr(&stack_out);
            if !plumbing::call_on_stack(ptr::null(),
                    |_ctx| unsafe {
                        stack_out = (_ctx,
                                     str::as_c_str(path,
                                        raw::symbols::g_file_new_for_path));
                    }) {
                let in = path.to_owned();
                owned_out = ~(ptr::null(), ptr::null());
                let po = ptr::to_mut_unsafe_ptr(owned_out);
                plumbing::call_off_stack(ptr::null(),
                    |_ctx| unsafe {
                        *po = (_ctx,
                               str::as_c_str(in,
                                    raw::symbols::g_file_new_for_path));
                    });
                out = ptr::to_unsafe_ptr(owned_out);
            }
            match (*out) {
                (ctx, obj) => object::take_object(obj, ctx)
            }
        }
    }
}

impl File for interfaces::File {
    fn get_path(&self) -> gstr::utf8 {
        unsafe {
            let self_ptr = self.raw();
            let self_ctx = self.context();
            let mut stack_out: *gchar = ptr::null();
            let mut owned_out: ~*gchar;
            let mut out = ptr::to_unsafe_ptr(&stack_out);
            if !plumbing::call_on_stack(self_ctx,
                    |_ctx| unsafe {
                        stack_out = raw::symbols::g_file_get_path(self_ptr);
                    }) {
                owned_out = ~ptr::null();
                let po = ptr::to_mut_unsafe_ptr(owned_out);
                plumbing::call_off_stack(self_ctx,
                    |_ctx| unsafe {
                        *po = raw::symbols::g_file_get_path(self_ptr);
                    });
                out = ptr::to_unsafe_ptr(owned_out);
            }
            gstr::utf8::wrap(*out)
        }
    }

    fn read_async(&self,
                  io_priority: int,
                  cancellable: Option<&classes::Cancellable>,
                  callback: AsyncReadyCallback) {
        unsafe {
            let self_ptr = self.raw();
            let self_ctx = self.context();
            let raw_cancellable: *raw::GCancellable = match (cancellable) {
                Some(c) => c.raw(),
                None    => ptr::null()
            };
            let mut cb_data = ~plumbing::CallbackData {
                        callback: cast::transmute(~callback),
                        context: ptr::null()
                    };
            let cb_data_raw: *mut plumbing::CallbackData
                             = cast::transmute(cb_data);
            if !plumbing::call_on_stack(self_ctx,
                    |_ctx| unsafe {
                        (*cb_data_raw).context = _ctx;
                        raw::symbols::g_file_read_async(self_ptr,
                                io_priority as libc::c_int,
                                raw_cancellable,
                                callbacks::async_ready_callback,
                                cb_data_raw as *());
                    }) {
                let in = ~io_priority;
                plumbing::call_off_stack(self_ctx,
                    |_ctx| unsafe {
                        (*cb_data_raw).context = _ctx;
                        raw::symbols::g_file_read_async(self_ptr,
                                *in as libc::c_int,
                                raw_cancellable,
                                callbacks::async_ready_callback,
                                cb_data_raw as *());
                    });
            }
        }
    }

    fn read_finish(&self, res: &interfaces::AsyncResult)
                  -> object::Reference<raw::GFileInputStream> {
        unsafe {
            let self_ptr = self.raw();
            let self_ctx = self.context();
            let res_raw = res.raw();
            let mut stack_out: (*plumbing::GMainContext,
                                *raw::GFileInputStream,
                                *glib::raw::GError)
                               = (ptr::null(), ptr::null(), ptr::null());
            let mut owned_out: ~(*plumbing::GMainContext,
                                 *raw::GFileInputStream,
                                 *glib::raw::GError);
            let mut out = ptr::to_unsafe_ptr(&stack_out);
            if !plumbing::call_on_stack(self_ctx,
                    |_ctx| unsafe {
                        let error: *glib::raw::GError = ptr::null();
                        let ret = raw::symbols::g_file_read_finish(self_ptr,
                                res_raw, ptr::to_unsafe_ptr(&error));
                        stack_out = (_ctx, ret, error);
                    }) {
                owned_out = ~(ptr::null(), ptr::null(), ptr::null());
                let po = ptr::to_mut_unsafe_ptr(owned_out);
                plumbing::call_off_stack(self_ctx,
                    |_ctx| unsafe {
                        let error: *glib::raw::GError = ptr::null();
                        let ret = raw::symbols::g_file_read_finish(self_ptr,
                                res_raw, ptr::to_unsafe_ptr(&error));
                        *po = (_ctx, ret, error);
                    });
                out = ptr::to_unsafe_ptr(owned_out);
            }
            match (*out) {
                (ctx, obj, error) => {
                    if ptr::is_not_null(error) {
                        let msg = str::raw::from_c_str((*error).message);
                        glib::raw::symbols::g_error_free(error);
                        fail!(msg);
                    }
                    object::take_object(obj, ctx)
                }
            }
        }
    }
}
