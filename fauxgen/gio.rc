/* This file is part of Grust, GObject introspection bindings for Rust
 *
 * Copyright (C) 2013  Mikhail Zabaluev <mikhail.zabaluev@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */

#[link(name = "grust-Gio", vers = "2.0",
       uuid = "1a020b19-8587-44fe-9b04-c529c27f3c33")];

#[crate_type = "lib"];

extern mod grust (name="grust", vers="0.1");
extern mod glib (name="grust-GLib", vers="2.0");
extern mod gobject (name="grust-GObject", vers="2.0");

use grust::plumbing;
use grust::types::*;
use grust::gstr;

pub mod raw {
    use grust::types::*;

    pub trait GFile { }

    #[link_name="gio-2.0"]
    pub extern mod symbols {
        fn g_file_new_for_path(path: *gchar) -> *GFile;
        fn g_file_get_path(file: *GFile) -> *gchar;
    }
}

pub trait File {
    fn get_path(&self) -> gstr::utf8;
}

impl File {
    pub fn new_for_path(path: &str) -> plumbing::Object<raw::GFile> {
        unsafe {
            let mut stack_out: (*plumbing::GMainContext, *raw::GFile)
                               = (ptr::null(), ptr::null());
            let mut owned_out: ~(*plumbing::GMainContext, *raw::GFile);
            let mut out = ptr::to_unsafe_ptr(&stack_out);
            if !plumbing::call_on_stack(ptr::null(),
                    |_ctx| unsafe {
                        stack_out = (_ctx,
                                     str::as_c_str(path,
                                        raw::symbols::g_file_new_for_path));
                    }) {
                let in = path.to_owned();
                owned_out = ~(ptr::null(), ptr::null());
                let po = ptr::to_mut_unsafe_ptr(owned_out);
                plumbing::call_off_stack(ptr::null(),
                    |_ctx| unsafe {
                        *po = (_ctx,
                               str::as_c_str(in,
                                    raw::symbols::g_file_new_for_path));
                    });
                out = ptr::to_unsafe_ptr(owned_out);
            }
            match (*out) {
                (ctx, obj) => plumbing::take_object(obj, ctx)
            }
        }
    }
}

impl File for plumbing::Object<raw::GFile> {
    fn get_path(&self) -> gstr::utf8 {
        unsafe {
            let self_ptr = self.raw();
            let self_ctx = self.context();
            let mut stack_out: *gchar = ptr::null();
            let mut owned_out: ~*gchar;
            let mut out = ptr::to_unsafe_ptr(&stack_out);
            if !plumbing::call_on_stack(self_ctx,
                    |_ctx| unsafe {
                        stack_out = raw::symbols::g_file_get_path(self_ptr);
                    }) {
                owned_out = ~ptr::null();
                let po = ptr::to_mut_unsafe_ptr(owned_out);
                plumbing::call_off_stack(self_ctx,
                    |_ctx| unsafe {
                        *po = raw::symbols::g_file_get_path(self_ptr);
                    });
                out = ptr::to_unsafe_ptr(owned_out);
            }
            gstr::utf8::wrap(*out)
        }
    }
}
